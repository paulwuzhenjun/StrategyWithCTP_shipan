#pragma once
#include "strategy.h"
#include <map>
using namespace std;
//#define ES_GRIDCOUNT 120		// 上下所有网格数量

// 外盘长期有效单固定间距网格固定止盈
// 砍一半网格
// 取消挂单方式

class StrategyGridMAStopGTCChop : public CStrategy
{
	struct mParasType
	{
		char InstCodeName[30];
		char StartTime[30];
		char EndTime[30];
		char OpenTime[30];
		char CloseTime[30];
		bool OpenBuyAllow;
		bool OpenSellAllow;
		int UpGridCount;				// 上网格数量
		int UpGridDistPoint;			// 上网格间距
		int DnGridCount;				// 下网格数量
		int DnGridDistPoint;			// 下网格间距
		int GridVol;
		double BasePrice;
		double StopPrice;				// 固定止损价格
		bool StopAfterOpen;				// 止损后是否开仓
		//int UpTwoGridTickDist[5];
		int ProfitPoint;				// 网格止盈点
		int StoplossPoint;				// 网格止损点(止损点不起作用)
		bool IsBasePrice;				// 基准价是否固定
		double BackPerc;				// 追踪止赢回撤百分比
		//int DnTwoGridTickDist[5];
		int OffFlagPoint;				// 基准偏移
	};

private:
	char  m_InstID[30];  //远期合约类型
	char  m_CommodityNo[30];
	char m_ExchangeID[30];
	char m_InstCodeName[30];

	double m_Price;//此时的价格
	double m_Buy1;  //远期买1价
	double m_Sell1; //远期卖1价

	time_t curTickTime;

	bool timeRuleForOpen(char datadate[10], char datatime[10]);
	bool timeRuleForClose(char datadate[10], char datatime[10]);
	bool timeRuleForCancel(char datadate[10], char datatime[10]);		// 收盘前10分钟撤单
	bool timeRuleForClosePrice(char datadate[10], char datatime[10]);

	bool m_bStoplossClose;
	int mOpenTimes;
	//int GridCloseOrderCount[10];
	bool mOpenRet;
	bool mCloseRet;
	double mClosePrice;
	double mPrice;				// 策略保存恢复价格
	bool mRet;
	bool mOrderRet;

public:
	StrategyGridMAStopGTCChop(char InstrumentID[30]);
	~StrategyGridMAStopGTCChop(void);
	bool m_bIsRunning; //初始化为ture
	bool m_bSampleReady;

	void InitVariables();
	void ResetStrategy();
	void SetCloseLocalOrder(LocalCLForDisplayField* pCLOrder);
	void SetParamValue(ParamNode node);
	//void MessageProcess();

	void InitAction();

	int mTickCount;
	int GridCloseOrderCount[ES_GRIDCOUNT];			// 最大支持上下各10个网格

	time_t tmt_StartTime;
	time_t tmt_EndTime;

	mParasType mStrategyParams;
	//void SetParamValue(ParamNode node);

	char mInstanceName[50];
	string mStrategyAndInstance;
	static int MaxOnHandPositionCount;
	static int OnHandPositionCount;

	map<string, string> matchnomap;
private:
	list<MyCloseOrderType> CloseOrderList;
	list<MyOpenOrderType> OpenOrderList;
	int shmindex;
	bool m_bCrossTradingDay;
	//char curTradingDay[30];

	void UpdateOrderIdToOrderList(int OrderId);
	void DeleteErrorOrderIdFromOrderList();
	void SetInstanceName(char xInstanceName[50]);
	void GetInstanceName(char* xInstanceName);
	int GetShmindex();
	void SetShmindex(int xshmindex);
	void SetStrategyID(char strategyId[50]);

	void ReqOrderDelete(int pOrderId, int pOrderLocalRef, int pFrontID, int pSessionID);
	void ReqOpenOrderInsert(MyOpenOrderType* pOpenOrder);
	void ReqCloseOrderInsert(MyCloseOrderType* pCloseOrder, char OpenOrderTime[21]);

	void OnRtnDepthMarketData(TickInfo* pDepthMarketData);
	void OnRtnOrder(OrderTradeMsg* pOrderTradeMsg);
	void OnRtnTrade(OrderTradeMsg* pOrderTradeMsg);
	void OnRspOrderInsert(ShmRspOrderInsert* pRspOrderInsert);
	void OnDisplayLocalCloseOrderList();
	void WideCharToMultiChar(CString str, char* dest_str);
	void WriteMsgToLogList(char logline[200]);
	void AddtoTipMsgListBox(char msgline[200]);
	void DisplayTradeOnScreen(OrderTradeMsg* pOrderTradeMsg, int mDirection, int mOpenOrClose, int mCloseProfitOrNot);

	void RecoverInstance(char cfgFileName[500]);
	void CloseMap();
	void WriteBasePrice(char* date, char* time);

	mSerializeHeader header;
	wstring s2ws(const string& s);
	int CreateStrategyMapOfView();
	int OpenStrategyMapOfView();
	void FlushStrategyInfoToFile();
	HANDLE StrategyInfoFileMap;
	char* StrategyfilePoint;
	bool IsOpenFlag();
};